name: Linters, Tests, and Deployment

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  # Run tests
  test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Install dependencies for the monorepo
      - name: Install dependencies
        run: yarn install

      # Set environment variables
      - name: Set environment variables
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "GHUB_CLIENT_ID=${{ secrets.GHUB_CLIENT_ID }}" >> $GITHUB_ENV
          echo "GHUB_CLIENT_SECRET=${{ secrets.GHUB_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> $GITHUB_ENV
          echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> $GITHUB_ENV
          echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> $GITHUB_ENV

      # Run tests for the backend
      # - name: Run Backend Tests
      #   working-directory: ./backend
      #   run: yarn test

      # Run tests for the client
      - name: Run Client Tests
        working-directory: ./client
        run: yarn test

  # Run linters
  lint:
    runs-on: ubuntu-latest
    needs: test
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Install dependencies for the monorepo
      - name: Install dependencies
        run: yarn install

      # Run ESLint for the backend
      - name: Run ESLint (Backend)
        working-directory: ./backend
        run: yarn eslint "**/*.{js,jsx,ts,tsx}"

      # Run ESLint for the client
      - name: Run ESLint (Client)
        working-directory: ./client
        run: yarn eslint "**/*.{js,jsx,ts,tsx}"


  # Build and deploy backend
  deploy-backend:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Build the Docker image for the backend
      - name: Build Backend Docker Image
        working-directory: ./backend
        run: docker build -t lincoln1000/sil-backend:latest .

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push the Docker image
      - name: Push Backend Docker Image
        run: docker push lincoln1000/backend:latest

      # Deploy the backend on the server
      - name: Deploy Backend
        run: |
          docker pull lincoln1000/sil-backend:latest
          docker stop backend || true
          docker rm backend || true
          docker run -d --name backend -p 3000:3000 \
            --env DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            --env GHUB_CLIENT_ID="${{ secrets.GHUB_CLIENT_ID }}" \
            --env GHUB_CLIENT_SECRET="${{ secrets.GHUB_CLIENT_SECRET }}" \
            --env CLOUDINARY_CLOUD_NAME="${{ secrets.CLOUDINARY_CLOUD_NAME }}" \
            --env CLOUDINARY_API_KEY="${{ secrets.CLOUDINARY_API_KEY }}" \
            --env CLOUDINARY_API_SECRET="${{ secrets.CLOUDINARY_API_SECRET }}" \
            lincoln1000/sil-backend:latest
