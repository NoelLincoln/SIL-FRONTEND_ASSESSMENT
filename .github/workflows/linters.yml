name: Linters, Tests, and Deployment

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  # Run tests
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # Install dependencies for the monorepo
      - name: Install dependencies
        run: yarn install

      # Run tests for the client
      - name: Run Client Tests
        working-directory: ./client
        run: yarn test

  # Run linters
  lint:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn install

      - name: Run ESLint (Backend)
        working-directory: ./backend
        run: yarn eslint "**/*.{js,jsx,ts,tsx}"

      - name: Run ESLint (Client)
        working-directory: ./client
        run: yarn eslint "**/*.{js,jsx,ts,tsx}"

  # Build and deploy backend using Docker Compose
  deploy-backend:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Create or Copy .env File
        run: |
          echo "Setting up .env file for backend..."
          if [ ! -f ./backend/.env ]; then
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > ./backend/.env
            echo "GHUB_CLIENT_ID=${{ secrets.GHUB_CLIENT_ID }}" >> ./backend/.env
            echo "GHUB_CLIENT_SECRET=${{ secrets.GHUB_CLIENT_SECRET }}" >> ./backend/.env
            echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> ./backend/.env
            echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> ./backend/.env
            echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> ./backend/.env
          else
            echo ".env file already exists."
          fi

      - name: Build and Push Server Image
        working-directory: ./backend
        run: |
          docker build -t lincoln1000/sil-backend:latest .
          docker push lincoln1000/sil-backend:latest

  # Deploy the backend to the server
  deploy:
    needs: deploy-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
            echo "Setting environment variables..."
            export DATABASE_URL=${{ secrets.DATABASE_URL }}
            export GHUB_CLIENT_ID=${{ secrets.GHUB_CLIENT_ID }}
            export GHUB_CLIENT_SECRET=${{ secrets.GHUB_CLIENT_SECRET }}
            export CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}
            export CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}
            export CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}

      - name: Set up Docker Compose
        run: |
            sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose version

      - name: Pull the latest backend image
        run: |
          docker-compose -f ./docker-compose.yml pull backend

      - name: Clean up old containers and networks
        run: |
            docker-compose -f ./docker-compose.yml down

      - name: Build and start the services
        run: |
            docker-compose -f ./docker-compose.yml up -d --build

      - name: Ensure Backend Container is Running
        run: |
            echo "Checking if backend container is running..."
            docker ps | grep "sil-backend" || exit 1

      - name: Cleanup unused containers and images
        run: docker system prune -f --volumes
